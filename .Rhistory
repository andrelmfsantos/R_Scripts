results <- kmo(df)
}
#write.csv(results$individual, "kmo_individual.csv")
return(list(
df = df,
removed = removed,
results = results))
}
temp <- kmo_optimal_solution(df)
temp$removed
communalities_optimal_solution <- function(df, nfactors){
library(psych)
removed <- c()
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
while (any(results$communality < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))]," - ",
min(results$communality))
column <- sprintf(rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
}
#write.csv(results$communality, "communalities_individual.csv")
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
temp2$removed
install.packages(c("corrplot", "nFactors"))
how_many_factors <- function(df){
# Determining the Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(df)) # get eigenvalues
ap <- parallel(subject=nrow(df),var=ncol(df),
rep=100,cent=.05)
nS <- nScree(x = ev$values, aparallel = ap$eigen$qevpea)
plotnScree(nS)
}
how_many_factors <- function(df, rep=1000, cent=0.05){
# Determining the Number of Factors to Extract
library(nFactors)
ev <- eigen(cor(df)) # get eigenvalues
ap <- parallel(subject=nrow(df),var=ncol(df),
rep=rep,cent=cent)
nS <- nScree(x = ev$values, aparallel = ap$eigen$qevpea)
plotnScree(nS)
}
how_many_factors(df2)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate)
results$communality <- as.data.frame(results$communality)
while (any(results$communality < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))]," - ",
min(results$communality))
column <- sprintf(rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
}
#write.csv(results$communality, "communalities_individual.csv")
return(list(
df = df,
removed = removed,
results = results))
}
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate)
results$communality <- as.data.frame(results$communality)
while (any(results$communality < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))]," - ",
min(results$communality))
column <- sprintf(rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
}
#write.csv(results$communality, "communalities_individual.csv")
return(list(
df = df,
removed = removed,
results = results))
how_many_factors(df)
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate)
results$communality <- as.data.frame(results$communality)
while (any(results$communality < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))]," - ",
min(results$communality))
column <- sprintf(rownames(results$communality)[which.min(apply(results$communality,MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
results$communality <- as.data.frame(results$communality)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
print(resu)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
print(resu)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
print(resu)
return(list(
df = df,
removed = removed,
results = results))
}
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
temp2$results$communality
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
print(results, digits = 3, cut = 0.4, sort = T)
return(list(
df = df,
removed = removed,
results = results))
}
temp2$results$communality
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
fa.diagram(temp2$results, digits = 3, cut = 0.4, sort = T)
plot(temp2$results)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
message(print(results, digits = 3, cut = 0.4, sort = T)) # print results
fa.diagram(results, digits = 3, cut = 0.4, sort = T) # Diagram of Factors, items and loadings
plot(results)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
print(results, digits = 3, cut = 0.4, sort = T) # print results
fa.diagram(results, digits = 3, cut = 0.4, sort = T) # Diagram of Factors, items and loadings
plot(results)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
fa.sort(temp2$results)
temp3 <- fa.sort(temp2$results)
getS3method("print","loadings") #get the hidden method and modify it
printLoadings <- function (x, digits = 3, cutoff = 0.1, sort = FALSE, ...)
{
Lambda <- unclass(x)
p <- nrow(Lambda)
factors <- ncol(Lambda)
if (sort) {
mx <- max.col(abs(Lambda))
ind <- cbind(1L:p, mx)
mx[abs(Lambda[ind]) < 0.5] <- factors + 1
Lambda <- Lambda[order(mx, 1L:p), ]
}
cat("\nLoadings:\n")
fx <- format(round(Lambda, digits))
names(fx) <- NULL
nc <- nchar(fx[1L], type = "c")
fx[abs(Lambda) < cutoff] <- paste(rep(" ", nc), collapse = "")
newx <- print(fx, quote = FALSE, ...) # I assigned this to a variable
vx <- colSums(x^2)
varex <- rbind(`SS loadings` = vx)
if (is.null(attr(x, "covariance"))) {
varex <- rbind(varex, `Proportion Var` = vx/p)
if (factors > 1)
varex <- rbind(varex, `Cumulative Var` = cumsum(vx/p))
}
cat("\n")
print(round(varex, digits))
invisible(newx) #previously returned x
}
temp3 <- printLoadings(temp2$results)
printLoadings <- function (x, digits = 3, cutoff = 0.4, sort = TRUE, ...)
{
Lambda <- unclass(x)
p <- nrow(Lambda)
factors <- ncol(Lambda)
if (sort) {
mx <- max.col(abs(Lambda))
ind <- cbind(1L:p, mx)
mx[abs(Lambda[ind]) < 0.5] <- factors + 1
Lambda <- Lambda[order(mx, 1L:p), ]
}
cat("\nLoadings:\n")
fx <- format(round(Lambda, digits))
names(fx) <- NULL
nc <- nchar(fx[1L], type = "c")
fx[abs(Lambda) < cutoff] <- paste(rep(" ", nc), collapse = "")
newx <- print(fx, quote = FALSE, ...) # I assigned this to a variable
vx <- colSums(x^2)
varex <- rbind(`SS loadings` = vx)
if (is.null(attr(x, "covariance"))) {
varex <- rbind(varex, `Proportion Var` = vx/p)
if (factors > 1)
varex <- rbind(varex, `Cumulative Var` = cumsum(vx/p))
}
cat("\n")
print(round(varex, digits))
invisible(newx) #previously returned x
}
temp3 <- printLoadings(temp2$results)
getS3method("print","loadings") #get the hidden method and modify it
printLoadings <- function (x, digits = 3, cutoff = 0.4, sort = TRUE, ...)
{
Lambda <- unclass(x)
p <- nrow(Lambda)
factors <- ncol(Lambda)
if (sort) {
mx <- max.col(abs(Lambda))
ind <- cbind(1L:p, mx)
mx[abs(Lambda[ind]) < 0.5] <- factors + 1
Lambda <- Lambda[order(mx, 1L:p), ]
}
cat("\nLoadings:\n")
fx <- format(round(Lambda, digits))
names(fx) <- NULL
nc <- nchar(fx[1L], type = "c")
fx[abs(Lambda) < cutoff] <- paste(rep(" ", nc), collapse = "")
newx <- print(fx, quote = FALSE, ...) # I assigned this to a variable
vx <- colSums(x^2)
varex <- rbind(`SS loadings` = vx)
if (is.null(attr(x, "covariance"))) {
varex <- rbind(varex, `Proportion Var` = vx/p)
if (factors > 1)
varex <- rbind(varex, `Cumulative Var` = cumsum(vx/p))
}
cat("\n")
print(round(varex, digits))
invisible(newx) #previously returned x
}
temp3 <- printLoadings(temp2$results)
temp3 <- printLoadings(temp2$results$loadings)
View(temp3)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
source("printLoadings.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
printLoadings(results$loadings)
fa.diagram(results, digits = 3, cut = 0.4, sort = T) # Diagram of Factors, items and loadings
plot(results)
return(list(
df = df,
removed = removed,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
source("printLoadings.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
loadings <- as.table(printLoadings(results$loadings))
fa.diagram(results, digits = 3, cut = 0.4, sort = T) # Diagram of Factors, items and loadings
plot(results)
return(list(
df = df,
removed = removed,
loadings = loadings,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
str(temp2$loadings)
write.csv(temp2$loadings,"~/Desktop/loadings.csv")
communalities_optimal_solution <- function(df, nfactors, rotate="varimax"){
library(psych)
source("how_many_factors.R")
source("printLoadings.R")
removed <- c()
results <- principal(df, nfactors = nfactors, rotate = rotate, scores = T)
#results$communality <- as.data.frame(results$communality)
while (any(as.data.frame(as.data.frame(results$communality)) < 0.5)){
message(sprintf("There is still an individual communality value below 0.5: "),
rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))]," - ",
min(as.data.frame(results$communality)))
column <- sprintf(rownames(as.data.frame(results$communality))[which.min(apply(as.data.frame(results$communality),MARGIN=1,min))])
removed <- c(removed, column)
#row <- match(column,names(df))
#row <- as.numeric(gsub("([0-9]+).*$", "\\1", row))
df <- df[, !(colnames(df) %in% column), drop=FALSE]
#df <- df[-row, ]
#rownames(df) <- NULL
results <- principal(df, nfactors = nfactors, scores = T)
}
#write.csv(results$communality, "communalities_individual.csv")
how_many_factors(df)
loadings <- as.table(printLoadings(results$loadings))
fa.diagram(results, digits = 3, cut = 0.4, sort = T) # Diagram of Factors, items and loadings
plot(results)
return(list(
df = df,
removed = removed,
loadings = loadings,
results = results))
}
temp2 <- communalities_optimal_solution(df2, nfactors = 4)
temp$results$AIR
